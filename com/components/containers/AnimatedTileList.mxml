<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns="*">

	<mx:Metadata>
		[Event("itemHasNewStatus")]
	</mx:Metadata>

    <mx:Script>

        <![CDATA[

        import mx.collections.ArrayCollection;
        import com.flashbsm.events.*;
        import flash.events.Event;
        import mx.core.IFactory;
        import mx.effects.Fade;
        import mx.effects.Move;
		import mx.events.EffectEvent;
		import mx.collections.*;
		import com.flashbsm.controller.fbsm;
		import mx.core.UIComponent;
		import mx.controls.Text;
		import flash.text.TextLineMetrics;


 		// The list of items to display
		private var items:ArrayCollection;
		
		public static const LAYOUT_NORMAL:String = "normal";
		public static const LAYOUT_GROUPS:String = "groups";
		public static const LAYOUT_ENABLED:String = "enabledDisabled";
        
        // The total number of items that are in the current filter selection.
        public var filteredCount:Number;

		// The class used to display each thumbnail
		public var itemRenderer:IFactory;

		//distance between thumbnails (horizontal and vertical)
		public var padding:int = 4;
	
		//holds instance of a thumbnail
		private var theThumb:UIComponent;

		//flag indicating how to layout the thumbnails
		public var layoutType:String = LAYOUT_NORMAL;
		
		//flag indicating if extras on thumbs should be visible or not
		public var showExtras:Boolean = false;
		
		//array holding labels
		private var headerLabels:Array = new Array();
		
        private function createTiles():void
        {
			removeAllChildren();

            var row:int = 0;
            var col:int = -1;

			var n:int = items.length;

			var i:int;
			
			for (i = 0; i < n; i++)
			{
				items[i].Thumb = itemRenderer.newInstance();
				items[i].Thumb.addEventListener("pluginStatusChanged", itemHasNewStatus)
				items[i].Thumb.info = items[i];
				items[i].Thumb.addEventListener("itemClick", pluginClick);
				items[i].Thumb.visible=false;
				addChild(items[i].Thumb)
				items[i].SelectionFlag = true;


			}
			
        }
        
        public function layoutTiles():void
		{
			if (items.length == 0){return;}
			if (width == 0) {return;}
			
			
			var numCols:int = 0;
			var numRows:int = 0;
			var columnWidth:int = 0;
			var gap:int = 0;
			var totalCols:int = 0;
			
			numRows = (height-40) / (items[0].Thumb.height + padding) - 1;
			numCols = (width-40) / (items[0].Thumb.width + padding) - 1;
			
			//for group sort
			columnWidth = (width-40) / fbsm.getInstance().everything.theCategories.length
			if (columnWidth < (items[0].Thumb.width+8))
			{
				columnWidth = items[0].Thumb.width+8
				gap = 4;
			}
			else
			{
				gap = (columnWidth-items[0].Thumb.width)/2;
			}
			

			verticalScrollPosition = 0;

			var row:int = 0;
			var col:int = 0;
			var disabledCol:Number = numCols+1;
			var disabledRow:Number = 0;
			var enabledCol:Number = -1;
			var enabledRow:Number = 0;


			var move:Move = null;

			var n:int = items.length;

			var rowArray:Array = new Array();
			for (i=0; i< fbsm.getInstance().everything.theCategories.length;i++)
			{
				rowArray.push(-1);
			}


			var theSelectionFlag:Boolean;
			
			removeHeaderLabels();
			
			switch (layoutType)
			{
				case LAYOUT_GROUPS:
					createHeaderLabels("groups", columnWidth, gap)
					break;
				case LAYOUT_ENABLED:
					var disabledTextX:int = items[0].Thumb.width + 10 + 10 + numCols * (items[0].Thumb.width + padding);
					var enabledTextX:int = 10;
					createHeaderLabels("status", disabledTextX, enabledTextX)
					break;
			}

			for (var i:int = 0 ; i < n ; i++)
			{
				theThumb = items[i].Thumb;
				theSelectionFlag = items[i].SelectionFlag;


				if (theSelectionFlag)
				{

					var xTo:Number = 0;
					var yTo:Number = 0;
					switch (layoutType)
					{
						case LAYOUT_NORMAL :
							showExtras ? items[i].Thumb.showExtras() : items[i].Thumb.hideExtras();
							if (col > numCols)
							{
								row++;
								col = 0;
							}
							
							xTo =  10 + col * (theThumb.width+padding);
							yTo = 10 + row * (theThumb.height + padding);
							
							col++;
							
							break;

						case LAYOUT_GROUPS :
							showExtras ? items[i].Thumb.showExtras() : items[i].Thumb.hideExtras();
							rowArray[items[i].PathIndex[0]]++;
							

							xTo = 10 + items[i].PathIndex[0] * (columnWidth) + gap;
							yTo = 30 + rowArray[items[i].PathIndex[0]] * (theThumb.height + padding);

							break;

						case LAYOUT_ENABLED :
							showExtras ? items[i].Thumb.showExtras() : items[i].Thumb.hideExtras();
							if (items[i].Enabled)
							{
								enabledCol++
								if (enabledCol > numCols/2)
								{
									enabledRow++;
									enabledCol = 0;
								}
								xTo = 10 + enabledCol * (theThumb.width + padding);
								yTo = 30 + enabledRow * (theThumb.height + padding);
							}
							else
							{
								disabledCol --;
								if (disabledCol < ( numCols % 2 ==0 ? numCols/2+1  :  numCols/2) )
								{
									disabledRow ++;
									disabledCol = numCols;
								}
								xTo = 10 + 10 + disabledCol * (theThumb.width + padding);
								yTo = 30 + disabledRow * (theThumb.height + padding);
							}
							break;
					}

                    // If the thumbnail is already visible
					// animate it to its new position.

                    if (theThumb.visible)
					{
                        // Animate only if the position is different
						// from its current position.
                        if (theThumb.x != xTo || theThumb.y != yTo)
						{
                            move = new Move(theThumb);
                            move.xTo = xTo;
                            move.yTo = yTo;
                            move.play();
                        }
					}

                    // If the thumbnail was not previously visible, sets its
					// x and y coordinates. We'll make it reappear after all
					// the visible thumbnails have reached their new position.

					else
					{
                        theThumb.x = xTo;
                        theThumb.y = yTo;
                        theThumb.includeInLayout = true;
					}


                }
				else
				{
				    theThumb.visible = false;
				    theThumb.includeInLayout = false;

				}


			}

            if (!move)
			{
                // No visible thumbnails were animated to a new position;
				// fade in newly selected thumbnails right away.
			    fadeInThumbnails();
            }
			else
			{
                // Fade in newly selected thumbnails after the last
				// visible thumbnail has moved to its new position.
		        move.addEventListener(EffectEvent.EFFECT_END,
					function(event:EffectEvent):void
					{
						fadeInThumbnails();
					});
			}




        }

        private function fadeInThumbnails():void
		{
			var n:int = items.length;
			var theSelectionFlag:Boolean;
			for (var i:int = 0; i < n ; i++)
			{
				theThumb = items[i].Thumb;
				theSelectionFlag = items[i].SelectionFlag;

                if (theSelectionFlag && !theThumb.visible)
				{

                    theThumb.alpha = 0;
                    theThumb.visible = true;

					var fadeIn:Fade = new Fade(theThumb);
                    fadeIn.alphaTo = 1;
					fadeIn.play();
				}

            }
        }



        public function filter(filterCallback:Function, relayout:Boolean):void
		{
		    if (items == null) {return; }
		    
            filteredCount = 0;
            var n:int = items.length;
            var fadeOut:Fade;
			var theSelectionFlag:Boolean;
			for (var i:int = 0 ; i < n ; i++)
			{
				theThumb = items[i].Thumb;
				theSelectionFlag = items[i].SelectionFlag;
                if (filterCallback.call(this, items[i]))
				{
                    filteredCount++;
                    items[i].SelectionFlag = true;
                    theThumb.alpha = 1;
                }
				else
				{
                    items[i].SelectionFlag = false;
                    if (relayout)
                    {
                    	fadeOut = new Fade(theThumb);
	                    fadeOut.alphaTo = 0.1;
	                    fadeOut.play();
                    }
                    else
                    {
                    	theThumb.alpha = 0.1;
                    }
                }
            }

            if (relayout)
			{

            	if (fadeOut)
				{

            		fadeOut.addEventListener(EffectEvent.EFFECT_END,
    					function(event:EffectEvent):void
						{
    						layoutTiles();
    					});
                	}
            	else
            	{
                	layoutTiles();
             	}
            }
		}

		public function sorter(theSort:Sort):void
		{
			items.sort = theSort;
			items.refresh()
			layoutTiles();
		}
		
		
		
		private function pluginClick(inEvent:Event):void
		{
			fbsm.getInstance().everything.setCurrentPlugin(inEvent.target.info.PathIndex);
			fbsm.getInstance().changeTheView(fbsm.NORMAL);
		}
        
        private function itemHasNewStatus(inEvent:Event):void
        {
        	dispatchEvent(new Event("itemHasNewStatus"));
        }
        
        public function set dataProvider(dataProvider:ArrayCollection):void
		{
        	items = dataProvider;
        	createTiles();
        	layoutTiles();
        }
        
        private function createHeaderLabels (inType:String, ... inParams):void
        {
        	switch (inType)
        	{
        		case "groups" :
        			for each (var categ:Object in fbsm.getInstance().everything.theCategories)
        			{
        				var newLabel:Text = new Text();
        				
        				newLabel.text = categ.Name;
        				newLabel.selectable = false;
        				newLabel.width = inParams[0];
        				newLabel.x = 10 + categ.Index * (inParams[0]);
        				newLabel.y = 2;
        				newLabel.styleName = "sortHeader";
        				headerLabels.push(newLabel);
        				addChild(newLabel);
        			}
        			break;
        		case "status" :
    				var disabledLabel:Text = new Text();
    				disabledLabel.selectable = false;
    				disabledLabel.text = "Disabled Plugins";
    				disabledLabel.y = 2;
    				disabledLabel.styleName = "sortHeader";
    				headerLabels.push(disabledLabel);
    				addChild(disabledLabel);
    				var metrics:TextLineMetrics = disabledLabel.measureText("Disabled Plugins");
    				disabledLabel.x = inParams[0] - metrics.width;
    				
    				var enabledLabel:Text = new Text();
    				enabledLabel.selectable = false;
    				enabledLabel.text = "Enabled Plugins";
    				enabledLabel.x = inParams[1]
    				enabledLabel.y = 2;
    				enabledLabel.styleName = "sortHeader";
    				headerLabels.push(enabledLabel);
    				addChild(enabledLabel);
    				
        	}
        }
        private function removeHeaderLabels ():void
        {
        	for each (var label:Text in headerLabels)
        	{
        		removeChild(label);
        	}
        	headerLabels = new Array();
        }
        

        ]]>

    </mx:Script>

</mx:Canvas>

